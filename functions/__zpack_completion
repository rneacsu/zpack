#!/usr/bin/env zsh

function __zpack_completion_init {
    unfunction __zpack_completion_init

    # Check if compinit was already run
    if [[ ${+_comps} == 1 && ${+_comp_options} == 1 ]]; then
        ZPACK[stats_compinit_status]="compinit already loaded"
        if [[ ${ZPACK_IGNORE_COMPINIT} != 1 ]]; then
            __zpack_warn "Warning: completion system was initialised before zpack. This affects performance."
            __zpack_warn "         Disable this warning by fixing the issue or by setting ZPACK_IGNORE_COMPINIT=1"
        fi
    else
        typeset -g -A _comps

        # Mock completion
        typeset -ga __ZPACK_COMPDEFS=()
        typeset -g __ZPACK_COMPLETION=1

        function compinit() {}
        function compdef() {
            __ZPACK_COMPDEFS+=("${(j: :)${(q)@}}")
        }

        # This only defines the 'compgen' and 'complete' functions which in turn
        # use 'compdef', so no need to mock them.
        autoload -Uz bashcompinit && bashcompinit
    fi

    # Style completion
    zstyle ':completion:*:corrections' format '%F{yellow}!- %d (errors: %e) -!%f'
    zstyle ':completion:*:descriptions' format '%F{blue}-- %d --%f'
    zstyle ':completion:*:messages' format '%F{purple}-- %d --%f'
    zstyle ':completion:*:warnings' format '%F{red}-- no matches found --%f'
    zstyle ':completion:*' group-name ''
}

function __zpack_completion_apply() {
    unfunction __zpack_completion_apply

    if [[ -n __ZPACK_COMPLETION ]]; then
        # Unmock completion
        unfunction compinit
        unfunction compdef

        # Load real completion
        ZPACK[stats_compinit_start]=$EPOCHREALTIME
        setopt localoptions extendedglob
        if [[ -f ${ZPACK[compdump_path]} && -n ${ZPACK[compdump_path]}(#q.Nmh-24) ]]; then
            autoload -Uz compinit && compinit -d ${ZPACK[compdump_path]} -C
            if [[ $? -ne 0 ]]; then
                __zpack_err "Could not initialise completions from cache."
                return 1
            fi
            ZPACK[stats_compinit_status]="loaded from cache"
        else
            if [[ -f ${ZPACK[compdump_path]} ]]; then
                ZPACK[stats_compinit_status]="loaded from scratch (stale cache)"
            else
                ZPACK[stats_compinit_status]="loaded from scratch (missing cache)"
            fi

            # Do not dump because we also have to apply completions from mocks
            autoload -Uz compinit && compinit -d ${ZPACK[compdump_path]} -D
            if [[ $? -ne 0 ]]; then
                __zpack_err "Could not initialise completions."
                return 1
            fi

            # Apply definitions from mocks
            local comp comp_args
            for comp in $__ZPACK_COMPDEFS; do
                comp_args=("${(z)comp}")
                comp_args=("${(Q)comp_args[@]}")
                compdef "$comp_args[@]"
            done

            # Now we can dump completions
            if ! compdump; then
                __zpack_err "Could not dump completions."
                return 1
            fi

            # Finally compile dump for even faster loading
            autoload -Uz zrecompile
            ZPACK[stats_compinit_compile_start]=$EPOCHREALTIME
            if ! zrecompile -q -p ${ZPACK[compdump_path]}; then
                __zpack_err "Could not compile completions dump."
                return 1
            fi
            ZPACK[stats_compinit_compile_end]=$EPOCHREALTIME
        fi
        ZPACK[stats_compinit_end]=$EPOCHREALTIME

        # Cleanup
        unset __ZPACK_COMPDEFS
        unset __ZPACK_COMPLETION
    fi
}

function __zpack_completion() {
    __zpack_subcmd completion $@
}

__zpack_completion $@
