#!/usr/bin/env zsh

# Output Functions
function __zpack_out() {
    print -P "%B%F{green}\u276F %f%b""$*"
}

function __zpack_out_plain() {
    print "$*"
}

function __zpack_warn() {
    print -P %F{yellow}"$*"%f >&2
}

function __zpack_err() {
    print -P %F{red}"$*"%f >&2
}


# Cache functions
function __zpack_cache() {
    printf "%s\n" "$*" >>$ZPACK_CACHE_FILE
}

function __zpack_cache_var() {
    if [[ ${(Pt)1} = array* ]]; then
        __zpack_cache "$1=( ${(Pq-@)1} )"
    else
        __zpack_cache "$1=${(Pq-)1}"
    fi
}

function __zpack_cache_func() {
    __zpack_cache "$(type -f $1)"
}


# Helper functions
function __zpack_path() {
    path+=($1)
    __zpack_cache "path+=(${(q-)1})"
}

function __zpack_fpath() {
    fpath=($1 $fpath)
    __zpack_cache "fpath=(${(q-)1} \$fpath)"
}

function __zpack_export() {
    export $1
    __zpack_cache_var $1
    __zpack_cache "export $1"
}

function __zpack_zstyle() {
    zstyle $1 $2 $3
    __zpack_cache "zstyle ${(q-)1} ${(q-)2} ${(q-)3}"
}

function __zpack_source() {
    local location=$1
    local plugin_id=$2

    if [[ -n $plugin_id ]]; then
        zsh_loaded_plugins+=( $plugin_id )
        __zpack_cache "zsh_loaded_plugins+=( ${(q-)plugin_id} )"
    fi
    ZERO=$location source $location
    __zpack_cache "ZERO=${(q-)location} source ${(q-)location}"
}

function __zpack_run_hook() {
    local name=$1
    local cmd=${(P)name}

    if [[ -n $cmd ]]; then
        pushd -q $dir
        eval $cmd
        popd -q
        __zpack_cache "pushd -q ${(q-)dir}"
        __zpack_cache "eval $cmd"
        __zpack_cache "popd -q"
    fi
}

function __zpack_stats_time() {
    local key=$1
    local event=$2

    ZPACK_STATS[${key}_${event}]=$EPOCHREALTIME
    __zpack_cache "ZPACK_STATS[${key}_${event}]=\$EPOCHREALTIME"
}

function __zpack_subcmd() {
    local prefix=$1
    local subcmd=$2

    if [[ -z $prefix ]]; then
        __zpack_err "No prefix given."
        return 1
    fi
    if [[ -z $subcmd ]]; then
        __zpack_err "No subcommand given."
        return 1
    fi
    if [[ ${+functions[__zpack_${prefix}_${subcmd}]} == 0 ]]; then
        __zpack_err "Invalid subcomand given."
        return 1
    fi
    shift 2
    __zpack_${prefix}_${subcmd} $@
}

function __zpack_apply() {
    if [[ -n $ZPACK_CACHE ]]; then
        unset ZPACK_CACHE
        source $ZPACK_CACHE_FILE
        ZPACK_STATS[cache_hit]=1
    fi
    __zpack_completion apply
}


# Init function
function __zpack_init() {
    if ! zmodload zsh/datetime; then
        __zpack_err "Could not load zsh/datetime module."
        return 1
    fi

    typeset -gA ZPACK_STATS
    ZPACK_STATS[init_start]=$EPOCHREALTIME

    # Check cache
    if [[ -f $ZPACK_CACHE_FILE && $ZPACK_CACHE_FILE -nt ${ZDOTDIR:-$HOME}/.zshrc ]]; then
        ZPACK_CACHE=1
    else
        # Init Variables
        ZPACK_PLUGINS=()
        ZPACK_RELEASES=()
        ZPACK_SNIPPETS=()
        ZPACK_BUNDLES=()
        ZPACK_BINARIES=()

        # Setup directories and files
        local dir
        for dir in $ZPACK_BIN_DIR $ZPACK_CACHE_DIR; do
            [[ -d $dir ]] || mkdir -p $dir
        done
        rm -f $ZPACK_COMPDUMP_PATH
        : > $ZPACK_CACHE_FILE
        __zpack_cache "#!/usr/bin/env zsh"
        __zpack_stats_time cache start
        __zpack_path $ZPACK_BIN_DIR

        # Zsh Plugin Standard
        PMSPEC=0fbis
        typeset -ga zsh_loaded_plugins
        __zpack_cache_var PMSPEC
        __zpack_cache "typeset -ga zsh_loaded_plugins"
    fi

    # Define commands and their description
    typeset -gA __ZPACK_CMDS
    __ZPACK_CMDS=(
        "load"    "clone and load plugin"
        "omz"     "load ohmyzsh plugins or libraries"
        "bin"     "clone and add files to PATH"
        "release" "download and add binary release"
        "snippet" "download and load snippet from url"
        "bundle"  "load predefined bundles"
        "apply"   "apply setup to current shell"
        "update"  "update all repositories, reset and restart shell"
        "compile" "compile files from the given path"
        "clone"   "clone plugin from repository"
        "list"    "print plugins, releases, snippets, bundles and binaries"
        "reset"   "delete cache and bin dirs and restart shell"
        "prune"   "delete everything and restart shell"
        "stats"   "print statistics about zpack"
        "help"    "print usage information"
    )

    # Init completion
    autoload -Uz __zpack_completion
    __zpack_completion init

    ZPACK_STATS[init_end]=$EPOCHREALTIME
}

__zpack_init $@
