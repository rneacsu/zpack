#!/usr/bin/env zsh

function __zpack_bundle_omz-lib() {
    zpack omz lib/history.zsh
    zpack omz lib/directories.zsh
    zpack omz lib/completion.zsh
    zpack omz lib/theme-and-appearance.zsh
}

function __zpack_bundle_fzf() {
    local preview tab
    zparseopts -D -E -preview=preview -tab=tab || return 1

    zpack release junegunn/fzf $@
    zpack snippet https://github.com/junegunn/fzf/raw/master/shell/key-bindings.zsh
    zpack snippet https://github.com/junegunn/fzf/raw/master/shell/completion.zsh

    typeset -g FZF_DEFAULT_OPTS="$ZPACK_FZF_DEFAULT_OPTS --prompt='~ ' --pointer='▶' --marker='✓' --color=16"
    if [[ $ZPACK_FZF_CASE_SENSITIVE != true ]]; then
        FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS -i"
    fi

    if [[ -n $preview ]]; then
        local cat_cmd="cat"
        local tree_cmd="ls -l"
        local tree_level=${ZPACK_FZF_TREE_LEVEL:-3}
        local fzf_preview_cmd fzf_tab_preview_cmd

        [[ $+commands[bat] == 1 ]] && cat_cmd="bat -n --color=always"
        [[ $+commands[tree] == 1 ]] && tree_cmd="tree -L $tree_level"
        [[ $+commands[exa] == 1 ]] && tree_cmd="exa --tree --icons -L $tree_level"

        fzf_preview_cmd="{ [[ -f {} ]] && $cat_cmd {} } || { [[ -d {} ]] && $tree_cmd {} }"
        fzf_tab_preview_cmd=${fzf_preview_cmd//\{\}/\$realpath}

        typeset -g FZF_CTRL_T_OPTS="$FZF_CTRL_T_OPTS --height 80% --preview '$fzf_preview_cmd'"
        typeset -g FZF_ALT_C_OPTS="$FZF_ALT_C_OPTS $FZF_CTRL_T_OPTS"
    fi
    if [[ -n $tab ]]; then
        zpack load Aloxaf/fzf-tab
        __zpack_cache_zstyle ':completion:*:descriptions' format '[%d]'
        __zpack_cache_zstyle ':fzf-tab:*' use-fzf-default-opts yes
        __zpack_cache_zstyle ':fzf-tab:complete:cd:*' fzf-preview $fzf_tab_preview_cmd
        __zpack_cache_zstyle ':fzf-tab:complete:cd:*' fzf-min-height 20
        __zpack_cache_zstyle ':fzf-tab:complete:ls:*' fzf-preview $fzf_tab_preview_cmd
        __zpack_cache_zstyle ':fzf-tab:complete:ls:*' fzf-min-height 20
    fi

    __zpack_cache export FZF_DEFAULT_OPTS
    __zpack_cache var FZF_CTRL_T_OPTS
    __zpack_cache var FZF_ALT_C_OPTS
}

function __zpack_bundle_bat() {
    zpack release sharkdp/bat $@
    BAT_THEME="base16"
    __zpack_cache export BAT_THEME
}

function __zpack_bundle_exa() {
    zpack release ogham/exa $@
    zpack snippet https://github.com/ogham/exa/raw/master/completions/zsh/_exa
}

function __zpack_bundle_plow() {
    zpack release six-ddc/plow $@
    function plow() {
        unfunction plow
        eval "$(plow --completion-script-zsh)"
        plow $@
    }
    __zpack_cache func plow
}

function __zpack_bundle_zsh-users() {
    zpack load zsh-users/zsh-autosuggestions
    zpack load zsh-users/zsh-completions

    zpack load zsh-users/zsh-syntax-highlighting

    zpack load zsh-users/zsh-history-substring-search --after-load '
        bindkey -M emacs "^[[A" history-substring-search-up
        bindkey -M viins "^[[A" history-substring-search-up
        bindkey -M vicmd "^[[A" history-substring-search-up
        if [[ -n "${terminfo[kcuu1]}" ]]; then
            bindkey -M emacs "${terminfo[kcuu1]}" history-substring-search-up
            bindkey -M viins "${terminfo[kcuu1]}" history-substring-search-up
            bindkey -M vicmd "${terminfo[kcuu1]}" history-substring-search-up
        fi

        bindkey -M emacs "^[[B" history-substring-search-down
        bindkey -M viins "^[[B" history-substring-search-down
        bindkey -M vicmd "^[[B" history-substring-search-down
        if [[ -n "${terminfo[kcud1]}" ]]; then
            bindkey -M emacs "${terminfo[kcud1]}" history-substring-search-down
            bindkey -M viins "${terminfo[kcud1]}" history-substring-search-down
            bindkey -M vicmd "${terminfo[kcud1]}" history-substring-search-down
        fi
    '
}

function __zpack_bundle_powerlevel10k() {
    zpack load romkatv/powerlevel10k::powerlevel10k --after-load '
        [[ ! -f ${POWERLEVEL9K_CONFIG_FILE:=${ZDOTDIR:-~}/.p10k.zsh} ]] || source ${POWERLEVEL9K_CONFIG_FILE:=${ZDOTDIR:-~}/.p10k.zsh}
    '
}

function __zpack_bundle_chezmoi() {
    zpack release twpayne/chezmoi --completion 'chezmoi completion zsh > _chezmoi' $@
}

function __zpack_bundle_delta() {
    zpack release dandavison/delta --completion 'delta --generate-completion zsh > _delta' $@
}

function __zpack_bundle_zoxide() {
    local cmd
    zparseopts -D -E -cmd:=cmd || return 1

    zpack release ajeetdsouza/zoxide $@
    if [[ -n $cmd ]]; then
        cmd=$cmd[2]
    fi
    __zpack_cache eval "eval \"\$(zoxide init --cmd ${cmd:-z} zsh)\""
}

function __zpack_bundle_lazygit() {
    zpack release jesseduffield/lazygit $@
    __zpack_cache eval "alias lg='lazygit'"
}

function __zpack_bundle_k9s() {
    zpack release derailed/k9s --completion 'k9s completion zsh > _k9s' $@
}

{
    local fun
    typeset -ga __ZPACK_ALL_BUNDLES=()
    for fun in ${(k)functions}; do
        [[ $fun = __zpack_bundle_* ]] && __ZPACK_ALL_BUNDLES+=( ${fun#__zpack_bundle_} )
    done
}

function zpack-bundle() {
    if [[ $# == 0 ]]; then
        __zpack_out_plain "Available bundles:"
        local bundle
        for bundle in $__ZPACK_ALL_BUNDLES; do
            __zpack_out_plain "    ${bundle}"
        done
        return
    fi

    local bundle=$1

    if [[ ${+functions[__zpack_bundle_$bundle]} == 0 ]]; then
        __zpack_err "Bundle does not exist. Run 'zpack bundle' to see available bundles."
        return 1
    fi

    shift
    __zpack_cache stats_time "bundle_${bundle}_start"
    __zpack_bundle_$bundle $@
    __zpack_cache stats_time "bundle_${bundle}_end"
    __ZPACK_BUNDLES+=($bundle)
}

zpack-bundle $@
