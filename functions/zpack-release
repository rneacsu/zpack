#!/usr/bin/env zsh

# Inspired by https://github.com/zdharma-continuum/zinit/blob/main/zinit-install.zsh

function __zpack_release_hash() {
    printf 'Version: %s\n' $version
    printf 'Pattern: %s\n' $pattern
    printf 'Filter: %s\n' $filter
    printf 'Name: %s\n' $name
}

function __zpack_release_get_version() {
    local repo=$1
    local version

    version=$(curl -sL https://github.com/$repo/releases/latest | sed -En "s:.*href=\"/$repo/releases/tag/([^\"]+)\".*:\1:p")
    print ${version:t}
}

function __zpack_release_get_assets() {
    local repo=$1
    local version=$2
    local assets

    assets=$(curl -sL https://github.com/$repo/releases/expanded_assets/$version | sed -En "s:.*href=\"(/$repo/releases/download/$version/[^\"]+)\".*:\1:p")
    print $assets
}

function __zpack_release_filter_junk() {
    local filter="^(*(md5|sig|asc|txt|vsix|sum|sha256|pkg)*|*.(apk|deb|json|rpm|sh))"

    __zpack_release_filter_pattern $filter $@
}

function __zpack_release_filter_os() {
    local os=$(uname -s)
    local filter="*"

    case $os in
        (Darwin)
            filter='*(apple|darwin|apple-darwin|dmg|mac|macos|mac-os|Darwin)*'
        ;;
        (Linux)
            filter='*(linux|Linux)*'
            # set -- "${(f)$(__zpack_release_filter_pattern $filter $@)}"
            # filter='^*musl*'
        ;;
        (MINGW* | MSYS* | CYGWIN* | Windows_NT)
            filter='*pc-windows-gnu*'
        ;;
        (*)
            __zpack_warn "Unsupported OS '$os'"
        ;;
    esac

    __zpack_release_filter_pattern $filter $@
}

function __zpack_release_filter_arch() {
    local arch=$(uname -m)
    local filter="*"

    case $arch in
        (aarch64 | arm64)
            filter='*(arm64|aarch64)*'
        ;;
        (amd64 | i386 | i486 | i686| i786 | x64 | x86 | x86-64 | x86_64)
            filter='*(amd64|x86_64|x64)*'
        ;;
        (*)
            __zpack_warn "Unsupported architecture '$arch'"
        ;;
    esac

    __zpack_release_filter_pattern $filter $@
}

function __zpack_release_filter_pattern() {
    local asset found
    local filter=$1
    shift

    for asset in $@; do
        if [[ $asset == ${~filter} ]]; then
            found=1
            print $asset
        fi
    done

    if [[ -z $found ]]; then
        printf "%s\n" $@
    fi
}

function __zpack_release_install_pattern() {
    local found file
    local pattern=$1

    for file in ${~pattern}; do
        zpack-bin --name $name ${file:A}
        found=1
        break
    done

    [[ -n $found ]]
}

function __zpack_release_install() {
    pushd -q $dir

    if ! { [[ -n $filter ]] && __zpack_release_install_pattern "${filter[2]}"  ||
        __zpack_release_install_pattern "**/${name}(*)" ||
        __zpack_release_install_pattern "**/${name}" ||
        __zpack_release_install_pattern "**/*${name}*(*)" ||
        __zpack_release_install_pattern "**/*${name}*" ||
        __zpack_release_install_pattern "**/*(*)" }; then
        __zpack_err "No release found."
        return 1
    fi

    # Add completions
    if [[ -n $completion ]]; then
        __zpack_cache fpath $dir
    fi

    popd -q
}

function zpack-release() {
    local completion pattern list repo dir version assets filter name id
    zparseopts -D -E -completion:=completion \
        -pattern:=pattern p:=pattern \
        -filter:=filter f:=filter \
        -name:=name n:=name \
        -list=list l=list \
        || return 1

    if [[ $# == 0 ]]; then
        __zpack_err "'release' requires at least one parameter:"
        __zpack_err "    zpack release <repo>[@version]"
        __zpack_err "                         [--completion <cmd>]"
        __zpack_err "                         [-p <pattern>] [--pattern <pattern>]"
        __zpack_err "                         [-f <filter>] [--filter <filter>]"
        __zpack_err "                         [-n <name>] [--name <name>]"
        __zpack_err "                         [-l] [--list]"
        return 1
    fi

    __zpack_split_repo $1 || return 1

    if [[ -n $list ]]; then
        # Just list available assets from latest version
        __zpack_release_get_assets $repo ${branch:-$(__zpack_release_get_version $repo)}
        return
    fi

    if [[ -n $pattern ]]; then
        pattern="${pattern[2]}"
    else
        pattern="*"
    fi

    dir=$(__zpack_dir release $repo)
    [[ -d $dir ]] || mkdir -p $dir
    id=${dir#${ZPACK[releases_dir]}/}
    __ZPACK_RELEASES+=($id)

    if [[ -n $name ]]; then
        name="${name[2]}"
    else
        name=${id:t}
    fi

    setopt localoptions extendedglob nullglob

    # Check existing release
    local version_file=$dir/.zpack_release_version
    if [[ -n $branch ]]; then
        version=$branch
    elif [[ -f $version_file ]]; then
        version=$(< $version_file)
    else
        # Get latest version
        __zpack_out "Checking latest release version for '$repo'"
        version=$(__zpack_release_get_version $repo)
        if [[ $? -ne 0 ]] || [[ -z $version ]]; then
            __zpack_err "Could not find a valid release."
            return 1
        fi
        print $version > $version_file
    fi

    local hash_file=$dir/.zpack_release_hash
    if ! ( [[ -f $hash_file ]] && [[ $(< $hash_file) = $(__zpack_release_hash) ]] ); then
        # Remove old release
        rm -dr $dir
        mkdir -p $dir

        __zpack_out "Installing '$repo' version '$version'"

        assets=$(__zpack_release_get_assets $repo $version)
        assets=$(__zpack_release_filter_junk ${(f)assets})
        assets=$(__zpack_release_filter_os ${(f)assets})
        assets=$(__zpack_release_filter_arch ${(f)assets})
        assets=$(__zpack_release_filter_pattern $pattern ${(f)assets})
        assets=(${(f)assets})

        if [[ ${#assets} -eq 0 ]]; then
            __zpack_err "No release found."
            return 1
        fi

        local asset=$assets[1]
        __zpack_out "Downloading '${asset:t}'"
        if ! curl -sfL https://github.com/$asset -o "$dir/${asset:t}"; then
            __zpack_err "Could not download release."
            return 1
        fi

        # Store release hash and version
        __zpack_release_hash > $hash_file
        print $version > $version_file

        pushd -q $dir
        # Unpack tar and zip files
        local file archive
        for file in *.tar.gz; do
            __zpack_out "Extracting '$file'"
            tar -xzf $file && rm $file
            archive=1
        done
        for file in *.zip; do
            __zpack_out "Extracting '$file'"
            unzip $file >/dev/null && rm $file
            archive=1
        done

        # If no archive present, assume it is a binary
        if [[ -z $archive ]]; then
            mv ${asset:t} $name
        fi
        popd -q

        __zpack_release_install

        # Generate completions
        pushd -q $dir
        if [[ -n $completion ]]; then
            __zpack_out "Generating completions"
            eval "$completion[2]"
            if [[ $? -ne 0 ]]; then
                __zpack_out "Failed to generate completions."
                return 1
            fi
        fi
        popd -q
    else
        __zpack_release_install
    fi
}

zpack-release $@
